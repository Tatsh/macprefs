.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "MACPREFS" "1" "Oct 01, 2023" "0.3.3" "macprefs"
.SH NAME
macprefs \- macprefs v0.3.3
.SH COMMANDS
.SS prefs\-export
.sp
Export preferences.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
prefs\-export [OPTIONS]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Options
.INDENT 0.0
.TP
.B \-K, \-\-deploy\-key <deploy_key>
Key for pushing to Git repository.
.UNINDENT
.INDENT 0.0
.TP
.B \-c, \-\-commit
Commit the changes with Git.
.UNINDENT
.INDENT 0.0
.TP
.B \-d, \-\-debug
Enable debug logging.
.UNINDENT
.INDENT 0.0
.TP
.B \-o, \-\-output\-directory <output_directory>
Where to store the exported data.
.UNINDENT
.SS macprefs\-install\-job
.sp
Job installer.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
macprefs\-install\-job [OPTIONS]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Options
.INDENT 0.0
.TP
.B \-K, \-\-deploy\-key <deploy_key>
Key for pushing to Git repository.
.UNINDENT
.INDENT 0.0
.TP
.B \-d, \-\-debug
Enable debug logging.
.UNINDENT
.INDENT 0.0
.TP
.B \-o, \-\-output\-directory <output_directory>
Where to store the exported data.
.UNINDENT
.SH LIBRARY
.INDENT 0.0
.TP
.B async macprefs.plist2defaults.plist_to_defaults_commands(domain: str, root: Mapping[str, Mapping[str, Any] | list[Any] | bool | int | float | str | datetime | bytes], debug: bool = False) -> AsyncIterator[str]
Given a \fBPlistRoot\fP, generate a series of \fBdefaults write\fP commands.
.UNINDENT
.INDENT 0.0
.TP
.B async macprefs.processing.remove_data_fields(root: Mapping[str, Mapping[str, Any] | list[Any] | bool | int | float | str | datetime | bytes]) -> Mapping[str, Mapping[str, Any] | list[Any] | bool | int | float | str | datetime | bytes]
Clean up data fields from a \fBPlistRoot\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B async macprefs.processing.remove_data_fields_list(pl_list: Sequence[Mapping[str, Any] | list[Any] | bool | int | float | str | datetime | bytes]) -> Sequence[Mapping[str, Any] | list[Any] | bool | int | float | str | datetime | bytes]
Clean up data fields from a \fBPlistList\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B async macprefs.utils.is_simple(x: Mapping[Any, list[Any] | Mapping[str, Any] | bytes] | Sequence[list[Any] | Mapping[str, Any] | bytes] | ValuesView[str]) -> bool
Check if a value is a simple type of value.
.UNINDENT
.INDENT 0.0
.TP
.B macprefs.utils.setup_logging(debug: bool | None = False) -> None
Shared function to enable logging.
.UNINDENT
.INDENT 0.0
.TP
.B macprefs.utils.to_str(x: AnyStr) -> str
Convert a value to a string for shell.
.UNINDENT
.SH TYPING
.INDENT 0.0
.IP \(bu 2
\fI\%Index\fP
.IP \(bu 2
\fI\%Module Index\fP
.IP \(bu 2
\fI\%Search Page\fP
.UNINDENT
.SH AUTHOR
Andrew Udvare <audvare@gmail.com>
.SH COPYRIGHT
2023
.\" Generated by docutils manpage writer.
.
